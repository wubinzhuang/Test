import com.yeadun.testutil.BasicFunction;import org.apache.poi.ss.usermodel.CellType;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.ArrayList;import java.util.HashMap;/** * 规定Excel格式为： * +---------------------------+ * |表头1  | 表头2 | 表头3 | ... | * +---------------------------+ * |data1 | data2 | data3| ... | * +---------------------------+ * |data4 | data5 | data6| ... | * +---------------------------+ * |  ... |  ...  |  ... | ... | * +---------------------------+ * <p> * 通常第一行为表头。 * ExcelWorker作用： * 1、读取Excel内容，以行为单位，将一行数据作为参数，传递给一个自定义的函数进行计算，将结果返回。 * 同时也可以，指定需要计算的行号，以及指定的列号。 * 2、向指定单元格写入数据。 * 3、将Excel对象保存为新的Excel文件。 * * ExcelWorker<R> 为ExcelWorker使用每行数据进行计算后，返回结果的类型。 * * execute(): 读取行的数据后进行的操作。 * writeDataIntoCell(): 将数据写入Excel对象指定单元格中。 * saveAsFile(): 将Excel对象存入到新文件中。 */public class ExcelWorker<R> {    private static final Logger LOG = LoggerFactory.getLogger(ExcelWorker.class);    private XSSFWorkbook excel;    private ArrayList<String> sheetNames = new ArrayList<>();    private HashMap<String, ArrayList<String>> headers = new HashMap<>();    private String filePath;    public ExcelWorker(String filePath) {        this.filePath = filePath;        File file = new File(this.filePath);        try {            this.excel = new XSSFWorkbook(file);        } catch (Exception e) {            LOG.error(filePath + "不存在或者不是Excel文件类型。", e);        }        initExcelWork();    }    public int getTotalRows(String sheetName) throws Exception {        if (!this.sheetNames.contains(sheetName)) {            throw new Exception("\"" + sheetName + "\"sheet页不存在。");        }        return this.excel.getSheet(sheetName).getLastRowNum();    }    public XSSFSheet getSheet(String sheetName) throws Exception {        if (!this.sheetNames.contains(sheetName)) {            throw new Exception("\"" + sheetName + "\"sheet页不存在。");        }        return this.excel.getSheet(sheetName);    }    /**     * 将Excel对象存入新文件中。     *     * @param newFilePath 新文件路径     * @param overwrite   如果文件存在是否删除     */    public void saveAsFile(String newFilePath, boolean overwrite) {        OutputStream outputStream = null;        File newFile = new File(newFilePath);        if (newFile.exists()) {            if (overwrite) {                boolean result = newFile.delete();                if (result) {                    newFile = new File(newFilePath);                } else {                    LOG.warn("文件 \"{}\" 已经存在，删除失败。", newFilePath);                    return;                }            } else {                LOG.warn("文件 \"{}\" 已经存在。", newFilePath);                return;            }        }        try {            outputStream = new FileOutputStream(newFile);            this.excel.write(outputStream);        } catch (IOException e) {            LOG.error(e.getMessage());        } finally {            try {                if (null != outputStream) {                    outputStream.close();                }            } catch (IOException e) {                LOG.error(e.getMessage());            }        }    }    /**     * 向Excel对象写入数据，需要执行saveAsFile()方法才能存入成文件，且是新文件。     *     * @param sheetName   要写入的sheet页名称     * @param createSheet 如果sheet页不存在是否新建     * @param overwrite   如果单元格有值是否覆盖     * @param rowNum      写入的行号     * @param colNum      写入的列号     * @param data        写入的数据     * @return 写入成功返回true。     */    public boolean writeDataIntoCell(            String sheetName,            boolean createSheet,            boolean overwrite,            int rowNum,            int colNum,            String data) {        XSSFSheet sheet = this.excel.getSheet(sheetName);        if (sheet == null) {            if (createSheet) {                createNewSheet(sheetName);                sheet = this.excel.getSheet(sheetName);            } else {                LOG.info("\"{} 不存在，不允许新建sheet页。\"", sheetName);                return false;            }        }        XSSFRow row = sheet.getRow(rowNum - 1);        if (row != null) {            XSSFCell cell = row.getCell(colNum - 1);            if (cell != null) {                if (!overwrite) {                    String old = cell.getStringCellValue();                    LOG.info("\"{}\" 第 {} 行， 第 {} 列， 已经有值\"{}\"，不允许覆盖。"                            , sheetName, rowNum, colNum, old);                    return false;                }                cell.setCellType(CellType.STRING);                cell.setCellValue(data);                return true;            }            cell = row.createCell(colNum - 1, CellType.STRING);            cell.setCellValue(data);            return true;        }        row = sheet.createRow(rowNum - 1);        XSSFCell cell = row.createCell(colNum - 1);        cell.setCellType(CellType.STRING);        cell.setCellValue(data);        return true;    }    /**     * 获取所有sheet页名字     */    public ArrayList<String> getSheetNames() {        return this.sheetNames;    }    /**     * 获取指定sheet页的表头，规定表头为第一行     */    public ArrayList<String> getHeaders(String sheetName) {        return this.headers.get(sheetName);    }    @SuppressWarnings("unchecked")    public HashMap<Integer, R> execute(            String sheetName,            BasicFunction function) throws Exception {        return execute(sheetName, true, null, null, function);    }    @SuppressWarnings("unchecked")    public HashMap<Integer, R> execute (            String sheetName,            int[] rowNums,            int[] colNums,            BasicFunction function) throws Exception {        return execute(sheetName, true, rowNums, colNums, function);    }    @SuppressWarnings("unchecked")    public HashMap<Integer, R> execute(            String sheetName,            int[] colNums,            BasicFunction function)  throws Exception {        return execute(sheetName, true, null, colNums, function);    }    /**     * 根据每行数据进行计算。     *     * @param sheetName      sheet页名     * @param exceptFirstRow 是否排除第一行，通常第一行为表头     * @param rowNums        参与计算的行号。null表示所有行。     * @param colNums        指定列号。null表示所有列。     * @param function       自定义的函数，将执行该函数进行数据计算，     *                       参数为HashMap类型，key为表头，value为对应行列值。     * @return 计算结果，格式{行号：计算结果对象}     */    private HashMap<Integer, R> execute(            String sheetName,            boolean exceptFirstRow,            int[] rowNums,            int[] colNums,            BasicFunction<HashMap<String, String>, R> function) throws Exception {        HashMap<Integer, R> result = new HashMap<>();        XSSFSheet sheet = this.excel.getSheet(sheetName);        if (!this.sheetNames.contains(sheetName)) {            LOG.error("\"{}\" sheet页不存在。" , sheetName);            throw new Exception("\"" + sheetName + "\"sheet页不存在。");        }        ArrayList<String> header = this.headers.get(sheetName);        int firstRowNum = sheet.getFirstRowNum();        int lastRowNum = sheet.getLastRowNum();        if (rowNums == null && colNums == null) {            if (exceptFirstRow) {                firstRowNum += 1;            }            for (; firstRowNum <= lastRowNum; firstRowNum++) {                HashMap<String, String> params = new HashMap<>();                XSSFRow row = sheet.getRow(firstRowNum);                for (int colNum = 0; colNum < row.getLastCellNum(); colNum++) {                    XSSFCell cell = getStrTypeCell(row, colNum);                    params.put(header.get(colNum), cell.getStringCellValue());                }                result.put(firstRowNum + 1, function.apply(params));            }        } else if (rowNums == null) {            if (exceptFirstRow) {                firstRowNum += 1;            }            for (; firstRowNum <= lastRowNum; firstRowNum++) {                HashMap<String, String> params = new HashMap<>();                XSSFRow row = sheet.getRow(firstRowNum);                for (int colNum : colNums) {                    int colPos = colNum - 1;                    XSSFCell cell = getStrTypeCell(row, colPos);                    if (cell == null) {                        LOG.warn("Column Number: {} 超过了 {} 中 \"{}\" 列数的最大值: {}.",                                colNum, this.filePath, sheetName, row.getLastCellNum());                        continue;                    }                    params.put(header.get(colPos), cell.getStringCellValue());                }                result.put(firstRowNum + 1, function.apply(params));            }        } else if (colNums == null) {            for (int rowNum : rowNums) {                int rowPos = rowNum - 1;                if (rowPos > sheet.getLastRowNum()) {                    LOG.warn("Row Number: {} 超过了 {} 中 \"{}\" 行数的最大值: {}.",                            rowNum, this.filePath, sheetName, sheet.getLastRowNum() + 1);                    continue;                }                HashMap<String, String> params = new HashMap<>();                XSSFRow row = sheet.getRow(rowPos);                for (int colNum = 0; colNum < row.getLastCellNum(); colNum++) {                    XSSFCell cell = getStrTypeCell(row, colNum);                    params.put(header.get(colNum), cell.getStringCellValue());                }                result.put(rowNum, function.apply(params));            }        } else {            for (int rowNum : rowNums) {                int rowPos = rowNum - 1;                if (rowPos > sheet.getLastRowNum()) {                    LOG.warn("Row Number: {} 超过了 {} 中 \"{}\" 行数的最大值: {}.",                            rowNum, this.filePath, sheetName, sheet.getLastRowNum() + 1);                    continue;                }                HashMap<String, String> params = new HashMap<>();                XSSFRow row = sheet.getRow(rowPos);                for (int colNum : colNums) {                    int a;                    int colPos = colNum - 1;                    XSSFCell cell = getStrTypeCell(row, colPos);                    if (cell == null) {                        LOG.warn("Column Number: {} 超过了 {} 中 \"{}\" 列数的最大值: {}.",                                colNum, this.filePath, sheetName, row.getLastCellNum());                        continue;                    }                    params.put(header.get(colPos), cell.getStringCellValue());                }                result.put(rowNum, function.apply(params));            }        }        return result;    }    /**     * 将某行中的某个将单元格内容指定为String类型并返回。     *     * @param row    行对象     * @param colNum 列号     * @return 单元格对象     */    private XSSFCell getStrTypeCell(XSSFRow row, int colNum) {        XSSFCell cell = row.getCell(colNum);        if (cell != null) {            cell.setCellType(CellType.STRING);        }        return cell;    }    private synchronized void createNewSheet(String sheetName) {        if (this.sheetNames.contains(sheetName)) {            LOG.info("{} 已经存在。", sheetName);            return;        }        LOG.info("创建 {} Sheet页。", sheetName);        this.excel.createSheet(sheetName);        this.sheetNames.add(sheetName);    }    /**     * 初始化ExcelWork对象，主要获取每个sheet页名，加载每个sheet页的表头。     */    private void initExcelWork() {        // 获取每个Sheet页名        for (int i = 0; i < this.excel.getNumberOfSheets(); i++) {            this.sheetNames.add(this.excel.getSheetAt(i).getSheetName());        }        // 获取每个Sheet页表头        for (String sheetName : this.sheetNames) {            ArrayList<String> header = new ArrayList<>();            XSSFSheet sheet = this.excel.getSheet(sheetName);            XSSFRow headerRow = sheet.getRow(sheet.getFirstRowNum());            if (headerRow == null) {                this.headers.put(sheetName, header);                continue;            }            int colPos = headerRow.getFirstCellNum();            for (; colPos < headerRow.getLastCellNum(); colPos++) {                XSSFCell cell = headerRow.getCell(colPos);                String data = cell == null ? "Header-None-" + colPos : headerRow.getCell(colPos).getStringCellValue();                header.add(data);            }            this.headers.put(sheetName, header);        }    }}